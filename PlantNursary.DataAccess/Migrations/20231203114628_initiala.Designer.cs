// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlantNursary.DataAccess;

#nullable disable

namespace PlantNursary.DataAccess.Migrations
{
    [DbContext(typeof(NursaryContext))]
    [Migration("20231203114628_initiala")]
    partial class initiala
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlantNursary.Entities.Bed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BreedingSectorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BreedingSectorId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("PlantNursary.Entities.BreedingSector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Breedings");
                });

            modelBuilder.Entity("PlantNursary.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("PlantNursary.Entities.GreenHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("GreenHouses");
                });

            modelBuilder.Entity("PlantNursary.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("countOfPlants")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("dateOfPlanting")
                        .HasColumnType("date");

                    b.Property<int[]>("events")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<Guid?>("plantInLineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.HasIndex("plantInLineId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("PlantNursary.Entities.Nursary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("PlantNursary.Entities.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("diameter")
                        .HasColumnType("text");

                    b.Property<int>("groundType")
                        .HasColumnType("integer");

                    b.Property<int>("hardinessType")
                        .HasColumnType("integer");

                    b.Property<string>("height")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("peculiarities")
                        .HasColumnType("text");

                    b.Property<int>("placeType")
                        .HasColumnType("integer");

                    b.Property<int>("plantType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("PlantNursary.Entities.QueenCell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("QueenCells");
                });

            modelBuilder.Entity("PlantNursary.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("givenDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("PlantNursary.Entities.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("PlantNursary.Entities.Bed", b =>
                {
                    b.HasOne("PlantNursary.Entities.BreedingSector", null)
                        .WithMany("beds")
                        .HasForeignKey("BreedingSectorId");
                });

            modelBuilder.Entity("PlantNursary.Entities.Line", b =>
                {
                    b.HasOne("PlantNursary.Entities.Sector", null)
                        .WithMany("Lines")
                        .HasForeignKey("SectorId");

                    b.HasOne("PlantNursary.Entities.Plant", "plantInLine")
                        .WithMany()
                        .HasForeignKey("plantInLineId");

                    b.Navigation("plantInLine");
                });

            modelBuilder.Entity("PlantNursary.Entities.Sector", b =>
                {
                    b.HasOne("PlantNursary.Entities.Field", null)
                        .WithMany("sectors")
                        .HasForeignKey("FieldId");
                });

            modelBuilder.Entity("PlantNursary.Entities.BreedingSector", b =>
                {
                    b.Navigation("beds");
                });

            modelBuilder.Entity("PlantNursary.Entities.Field", b =>
                {
                    b.Navigation("sectors");
                });

            modelBuilder.Entity("PlantNursary.Entities.Sector", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
